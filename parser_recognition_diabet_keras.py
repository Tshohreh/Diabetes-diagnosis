# -*- coding: utf-8 -*-
"""Parser_recognition_diabet_keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gm2w1TAn9gaX2E47KHYAj39HNaNND-r1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import classification_report, confusion_matrix
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Load the dataset
data = pd.read_csv('/content/diabetes.csv')

# Splitting features and labels
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Preprocessing
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Build a simple neural network
model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.2f}")

# Predictions and Evaluation
y_pred = (model.predict(X_test) > 0.5).astype(int)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import pandas as pd

# بارگذاری داده‌ها
data = pd.read_csv('/content/diabetes.csv')

# تقسیم داده‌ها
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# پیش‌پردازش: مقیاس‌بندی
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# تقسیم داده‌ها به آموزش و تست
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ایجاد و آموزش مدل SVM
model = SVC(kernel='rbf', C=1, gamma='scale')  # RBF kernel
model.fit(X_train, y_train)

# پیش‌بینی
y_pred = model.predict(X_test)

# ارزیابی مدل
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

linear_model = SVC(kernel='linear', probability=True)
linear_model.fit(X_train, y_train)
y_pred = linear_model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))